public class BinaryTree {
    Node root;

    class Node
    {
        int data;
        Node left,right;

        Node(int val){
            data = val;
            left=null;
            right=null;
        }
    }  
    BinaryTree(int val){
        root= new Node(val);
    }

    public void InsertLeft(Node root,int val){
        Node newNode=new Node(val);
        root.left=newNode;
    }
    public void InsertRight(Node root,int val){
        Node newNode=new Node(val);
        root.right=newNode;
    }
    public static void preorder(Node root){
        if(root!=null) {
        System.out.print(root.data + " ");
        preorder(root.left);
        preorder(root.right);
    }
}
    public static void postorder(Node root){
        if(root!=null) {
        preorder(root.left);
        preorder(root.right);
        System.out.print(root.data+ " ");
        }
    }
    public static void inorder(Node root){
        if(root!=null){
        inorder(root.left);
        System.out.print(root.data+" ");
        inorder(root.right);
        }
    }
    public static void main(String[] args){
        BinaryTree tree=new BinaryTree(10);
        tree.InsertLeft(tree.root,5);
        tree.InsertRight(tree.root,15);
        tree.InsertLeft(tree.root.left,3);
        tree.InsertRight(tree.root.right,8);
        tree.InsertLeft(tree.root.right,12);
        BinaryTree.inorder(tree.root);
        System.out.print("\n");
        BinaryTree.preorder(tree.root);
        System.out.print("\n");
        BinaryTree.postorder(tree.root);
        System.out.print("\n");
    }
}
